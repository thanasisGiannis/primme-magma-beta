/*******************************************************************************
 * Copyright (c) 2016, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 * File: blaslapack.c
 *
 * Purpose - This file contains mostly C wrapper routines for
 *           calling various BLAS and LAPACK FORTRAN routines.
 *
 ******************************************************************************/

#include <stdlib.h>   /* free */
#include <string.h>   /* memmove */
#include <assert.h>
#include <math.h>
#include "template.h"
#include "blaslapack_private.h"
#include "blaslapack.h"


/*******************************************************************************
 * Subroutine Num_copy_Sprimme - y(0:n*incy-1:incy) = x(0:n*incx-1:incx)
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_copy_Sprimme(PRIMME_INT n, SCALAR *x, int incx, SCALAR *y, int incy,primme_params *primme) {

//	 SCALAR *tmp;
//	 magma_malloc((void**)&tmp,sizeof(SCALAR)*n);
	 #ifdef USE_DOUBLE
//	 magma_dcopy(n,x,incx,tmp,1,primme->queue);
//	 magma_dcopy(n,tmp,1,y,incy,primme->queue);	
      magma_dcopy(n,(magmaDouble_const_ptr)x,incx,(magmaDouble_ptr)y,incy,primme->queue);  
      #elif USE_DOUBLECOMPLEX
//	 magma_zcopy(n,x,incx,tmp,1,primme->queue);
//	 magma_zcopy(n,tmp,1,y,incy,primme->queue);	


	 magma_zcopy(n,(magmaDoubleComplex_const_ptr)x,incx,(magmaDoubleComplex_ptr)y,incy,primme->queue);
	 #elif USE_FLOAT
//	 magma_scopy(n,x,incx,tmp,1,primme->queue);
//	 magma_scopy(n,tmp,1,y,incy,primme->queue);	

	 magma_scopy(n,(magmaFloat_const_ptr)x,incx,(magmaFloat_ptr)y,incy,primme->queue);
	 #elif USE_FLOATCOMPLEX
//	 magma_ccopy(n,x,incx,tmp,1,primme->queue);
//	 magma_ccopy(n,tmp,1,y,incy,primme->queue);	

	 magma_ccopy(n,(magmaFloatComplex_const_ptr)x,incx,(magmaFloatComplex_ptr)y,incy,primme->queue); 
	 #endif

}
#endif

TEMPLATE_PLEASE
void Num_copy_Sprimme(PRIMME_INT n, SCALAR *x, int incx, SCALAR *y, int incy) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lincx = incx;
   PRIMME_BLASINT lincy = incy;

   while(n > 0) {
      ln = (PRIMME_BLASINT)min(n, PRIMME_BLASINT_MAX-1);
      XCOPY(&ln, x, &lincx, y, &lincy);
      n -= (PRIMME_INT)ln;
      x += ln;
      y += ln;
   }
}

/*******************************************************************************
 * Subroutine Num_gemm_Sprimme - C = op(A)*op(B), with C size m x n
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_gemm_Sprimme(const char *transa, const char *transb, int m, int n,
      int k, SCALAR alpha, SCALAR *a, int lda, SCALAR *b, int ldb, SCALAR beta,
      SCALAR *c, int ldc,primme_params *primme) {


   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

   /* Quick exit */
   if (k == 0) {
      Num_zero_matrix_Sprimme(c, m, n, ldc);
      return;
   }

   magma_trans_t mtransa;
   if(transa[0] == 'n' || transa[0] == 'N')
	mtransa = MagmaNoTrans;
   else if (transa[0] == 'y' || transa[0] == 'Y')
	mtransa = MagmaTrans;
   else
     mtransa = MagmaConjTrans;

   magma_trans_t mtransb;
   if(transb[0] == 'n' || transb[0] == 'N')
	mtransb = MagmaNoTrans;
   else if (transb[0] == 'y' || transb[0] == 'Y')
	mtransb = MagmaTrans;
   else
     mtransb = MagmaConjTrans;


   #ifdef USE_DOUBLE
   magma_dgemm(mtransa,mtransb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc,primme->queue);  
   #elif USE_DOUBLECOMPLEX
   magma_zgemm(mtransa,mtransb,m,n,k,MAGMA_Z_MAKE(RE(alpha),IM(alpha)),
               (magmaDoubleComplex_const_ptr)a,lda,
		     (magmaDoubleComplex_const_ptr)b,ldb,
                MAGMA_Z_MAKE(RE(beta),IM(beta)),
			(magmaDoubleComplex_ptr)c,ldc,primme->queue);
   #elif USE_FLOAT
   magma_sgemm(mtransa,mtransb,m,n,k,alpha,a,lda,b,ldb,beta,c,ldc,primme->queue);
   #elif USE_FLOATCOMPLEX
   magma_cgemm(mtransa,mtransb,m,n,k,MAGMA_C_MAKE(RE(alpha),IM(alpha)),
               (magmaFloatComplex_const_ptr)a,lda,
		     (magmaFloatComplex_const_ptr)b,ldb,
                MAGMA_C_MAKE(RE(beta),IM(beta)),
			(magmaFloatComplex_ptr)c,ldc,primme->queue); 
   #endif
}
#endif

TEMPLATE_PLEASE
void Num_gemm_Sprimme(const char *transa, const char *transb, int m, int n,
      int k, SCALAR alpha, SCALAR *a, int lda, SCALAR *b, int ldb, SCALAR beta,
      SCALAR *c, int ldc) {

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lk = k;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldb = ldb;
   PRIMME_BLASINT lldc = ldc;

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

   /* Quick exit */
   if (k == 0) {
      Num_zero_matrix_Sprimme(c, m, n, ldc);
      return;
   }

#ifdef NUM_CRAY
   _fcd transa_fcd, transb_fcd;

   transa_fcd = _cptofcd(transa, strlen(transa));
   transb_fcd = _cptofcd(transb, strlen(transb));
   XGEMM(transa_fcd, transb_fcd, &lm, &ln, &lk, &alpha, a, &llda, b, &lldb, &beta, 
         c, &lldc);
#else
   XGEMM(transa, transb, &lm, &ln, &lk, &alpha, a, &llda, b, &lldb, &beta, c, &lldc);
#endif

}

/*******************************************************************************
 * Subroutine Num_gemm_Sprimme - C = A*B or B*A where A is Hermitian,
 *    where C size m x n.
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_hemm_Sprimme(const char *side, const char *uplo, int m, int n,
      SCALAR alpha, SCALAR *a, int lda, SCALAR *b, int ldb, SCALAR beta, 
      SCALAR *c, int ldc, primme_params *primme) {
	
   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;
   magma_side_t mside = magma_side_const(side[0]);
   magma_uplo_t muplo = magma_uplo_const(uplo[0]);
   
   #ifdef USE_DOUBLE
   magma_dsymm(mside,
			muplo,
			m,
			n,
			alpha,
 			a,
			lda,
			b,
			ldb,
			beta,
			c,
			ldc,
			primme->queue);

   #elif USE_DOUBLECOMPLEX
   magmaDoubleComplex malpha,mbeta;
   memcpy(&malpha,&alpha,sizeof(SCALAR));
   memcpy(&mbeta,&beta,sizeof(SCALAR));

   magma_zhemm(mside,
			muplo,
			m,
			n,
			malpha,
 			(magmaDoubleComplex_const_ptr)a,
			lda,
			(magmaDoubleComplex_const_ptr)b,
			ldb,
			mbeta,
			(magmaDoubleComplex_ptr)c,
			ldc,
			primme->queue);

   #elif USE_FLOAT
   magma_ssymm(mside,
			muplo,
			m,
			n,
			alpha,
 			a,
			lda,
			b,
			ldb,
			beta,
			c,
			ldc,
			primme->queue);
   #elif USE_FLOATCOMPLEX 
   magmaFloatComplex malpha,mbeta;
   memcpy(&malpha,&alpha,sizeof(SCALAR));
   memcpy(&mbeta,&beta,sizeof(SCALAR));
   magma_chemm(mside,muplo,m,n,malpha,(magmaFloatComplex_const_ptr)a,lda,
		    (magmaFloatComplex_const_ptr)b,ldb,mbeta,
		    (magmaFloatComplex_ptr)c,ldc,primme->queue);
   #endif

}
#endif

TEMPLATE_PLEASE
void Num_hemm_Sprimme(const char *side, const char *uplo, int m, int n,
      SCALAR alpha, SCALAR *a, int lda, SCALAR *b, int ldb, SCALAR beta, 
      SCALAR *c, int ldc) {

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldb = ldb;
   PRIMME_BLASINT lldc = ldc;

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

#ifdef NUM_CRAY
   _fcd side_fcd, uplo_fcd;

   side_fcd = _cptofcd(side, strlen(side));
   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   XHEMM(side_fcd, uplo_fcd, &lm, &ln, &alpha, a, &llda, b, &lldb, &beta, c, &lldc);
#else
   XHEMM(side, uplo, &lm, &ln, &alpha, a, &llda, b, &lldb, &beta, c, &lldc);
#endif 

}

/*******************************************************************************
 * Subroutine Num_trmm_Sprimme - C = A*B or B*A where A is triangular,
 *    with C size m x n.
 ******************************************************************************/

TEMPLATE_PLEASE
void Num_trmm_Sprimme(const char *side, const char *uplo,
      const char *transa, const char *diag, int m, int n, SCALAR alpha,
      SCALAR *a, int lda, SCALAR *b, int ldb) {

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldb = ldb;

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

#ifdef NUM_CRAY
   _fcd side_fcd, uplo_fcd, transa_fcd, diag_fcd;

   side_fcd = _cptofcd(side, strlen(side));
   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   transa_fcd = _cptofcd(transa, strlen(transa));
   diag_fcd = _cptofcd(diag, strlen(diag));
   XTRMM(side_fcd, uplo_fcd, transa_fcd, diag_fcd, &lm, &ln, &alpha, a, &llda, b, &lldb);
#else
   XTRMM(side, uplo, transa, diag, &lm, &ln, &alpha, a, &llda, b, &lldb);
#endif

}

/*******************************************************************************
 * Subroutine Num_gemv_Sprimme - y = alpha*A*x + beta*y, with A size m x n
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_gemv_Sprimme(const char *transa, PRIMME_INT m, int n, SCALAR alpha,
      SCALAR *a, int lda, SCALAR *x, int incx, SCALAR beta, SCALAR *y,
      int incy,primme_params *primme) {

   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

   magma_trans_t mtransa;
   if(transa[0] == 'n' || transa[0] == 'N')
	mtransa = MagmaNoTrans;
   else if (transa[0] == 'y' || transa[0] == 'Y')
	mtransa = MagmaTrans;
   else
     mtransa = MagmaConjTrans;

   #ifdef USE_DOUBLE
   magma_dgemv(mtransa,m,n,alpha,(double*)a,lda,x,incx,beta,y,incy,primme->queue);
   #elif USE_DOUBLECOMPLEX
   magma_zgemv(mtransa,m,n,MAGMA_Z_MAKE(RE(alpha),IM(alpha)),(magmaDoubleComplex_const_ptr)a,lda,
              (magmaDoubleComplex_const_ptr)x,incx,MAGMA_Z_MAKE(RE(beta),IM(beta)),
              (magmaDoubleComplex_ptr)y,incy,primme->queue);
   #elif USE_FLOAT
   magma_sgemv(mtransa,m,n,alpha,(float*)a,lda,x,incx,beta,y,incy,primme->queue);
   #elif USE_FLOATCOMPLEX
   magma_cgemv(mtransa,m,n,MAGMA_C_MAKE(RE(alpha),IM(alpha)),(magmaFloatComplex_const_ptr)a,lda,
              (magmaFloatComplex_const_ptr)x,incx,MAGMA_C_MAKE(RE(beta),IM(beta)),
              (magmaFloatComplex_ptr)y,incy,primme->queue);
   #endif

}
#endif

TEMPLATE_PLEASE
void Num_gemv_Sprimme(const char *transa, PRIMME_INT m, int n, SCALAR alpha,
      SCALAR *a, int lda, SCALAR *x, int incx, SCALAR beta, SCALAR *y,
      int incy) {

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lincx = incx;
   PRIMME_BLASINT lincy = incy;

   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

   while(m > 0) {
      lm = (PRIMME_BLASINT)min(m, PRIMME_BLASINT_MAX-1);
#ifdef NUM_CRAY
      _fcd transa_fcd;

      transa_fcd = _cptofcd(transa, strlen(transa));
      XGEMV(transa_fcd, &lm, &ln, &alpha, a, &llda, x, &lincx, &beta, y, &lincy);
#else
      XGEMV(transa, &lm, &ln, &alpha, a, &llda, x, &lincx, &beta, y, &lincy);
#endif
      m -= (PRIMME_INT)lm;
      a += lm;
      if (transa[0] == 'n' || transa[0] == 'N') {
         y += lm;
      }
      else {
         x += lm;
         beta = 1.0;
      }
   }
}

/*******************************************************************************
 * Subroutine Num_hemv_Sprimme - y = alpha*A*x + beta*y where A is Hermitian
 ******************************************************************************/

TEMPLATE_PLEASE
void Num_hemv_Sprimme(const char *uplo, int n, SCALAR alpha, 
   SCALAR *a, int lda, SCALAR *x, int incx, SCALAR beta, 
   SCALAR *y, int incy) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lincx = incx;
   PRIMME_BLASINT lincy = incy;

   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

#ifdef NUM_CRAY
   _fcd uplo_fcd;

   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   XHEMV(uplo_fcd, &ln, &alpha, a, &llda, x, &lincx, &beta, y, &lincy);
#else
   XHEMV(uplo, &ln, &alpha, a, &llda, x, &lincx, &beta, y, &lincy);
#endif

}

/*******************************************************************************
 * Subroutine Num_axpy_Sprimme - y += alpha*x
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_axpy_Sprimme(PRIMME_INT n, SCALAR alpha, SCALAR *x, int incx, 
   SCALAR *y, int incy,primme_params *primme) {

  	 #ifdef USE_DOUBLE
      magma_daxpy(n,alpha,x,incx,y,incy,primme->queue);  
      #elif USE_DOUBLECOMPLEX
	 magma_zaxpy(n,MAGMA_Z_MAKE(RE(alpha),IM(alpha)),(magmaDoubleComplex_const_ptr)x,incx,
	            (magmaDoubleComplex_ptr)y,incy,primme->queue);
	 #elif USE_FLOAT
	 magma_saxpy(n,alpha,x,incx,y,incy,primme->queue);
	 #elif USE_FLOATCOMPLEX
	 magma_caxpy(n,MAGMA_C_MAKE(RE(alpha),IM(alpha)),(magmaFloatComplex_const_ptr)x,incx,
		       (magmaFloatComplex_ptr)y,incy,primme->queue); 
	 #endif

  
}
#endif

TEMPLATE_PLEASE
void Num_axpy_Sprimme(PRIMME_INT n, SCALAR alpha, SCALAR *x, int incx, 
   SCALAR *y, int incy) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lincx = incx;
   PRIMME_BLASINT lincy = incy;

   while(n > 0) {
      ln = (PRIMME_BLASINT)min(n, PRIMME_BLASINT_MAX-1);
      XAXPY(&ln, &alpha, x, &lincx, y, &lincy);
      n -= (PRIMME_INT)ln;
      x += ln;
      y += ln;
   }
}

/*******************************************************************************
 * Subroutine Num_dot_Sprimme - y'*x
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
SCALAR NumGPU_dot_Sprimme(PRIMME_INT n, SCALAR *x, int incx, SCALAR *y, int incy,primme_params *primme) {
   SCALAR r = 0.0;
   #ifdef USE_DOUBLE
   r = (SCALAR)magma_ddot(n,y,incy,x,incx,primme->queue);  
   #elif USE_DOUBLECOMPLEX
   magmaDoubleComplex tmp;
   tmp = magma_zdotc(n,(magmaDoubleComplex_const_ptr)y,incy,(magmaDoubleComplex_ptr)x,incx,primme->queue);  
   memcpy(&r,&tmp,sizeof(SCALAR));
   #elif USE_FLOAT
   r = magma_sdot(n,y,incy,x,incx,primme->queue);
   #elif USE_FLOATCOMPLEX
   magmaFloatComplex tmp;
   tmp = magma_cdotc(n,(magmaFloatComplex_const_ptr)y,incy,(magmaFloatComplex_ptr)x,incx,primme->queue);   
   memcpy(&r,&tmp,sizeof(SCALAR));
   #endif
   return r;
}
#endif

TEMPLATE_PLEASE
SCALAR Num_dot_Sprimme(PRIMME_INT n, SCALAR *x, int incx, SCALAR *y, int incy) {
/* NOTE: vecLib doesn't follow BLAS reference for sdot */
#if defined(USE_COMPLEX) || (defined(USE_FLOAT) && (defined(__APPLE__) || defined(__MACH__)))
/* ---- Explicit implementation of the zdotc() --- */
   PRIMME_INT i;
   SCALAR zdotc = 0.0;
   if (n <= 0) return(zdotc);
   if (incx == 1 && incy == 1) {
      for (i=0;i<n;i++) { /* zdotc = zdotc + dconjg(x(i))* y(i) */
         zdotc += CONJ(x[i]) * y[i];
      }
   }
   else {
      for (i=0;i<n;i++) { /* zdotc = zdotc + dconjg(x(i))* y(i) */
         zdotc += CONJ(x[i*incx]) * y[i*incy];
      }
   }
   return zdotc;
/* -- end of explicit implementation of the zdotc() - */
#else
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lincx = incx;
   PRIMME_BLASINT lincy = incy;
   SCALAR r = 0.0;

   while(n > 0) {
      ln = (PRIMME_BLASINT)min(n, PRIMME_BLASINT_MAX-1);
      r += XDOT(&ln, x, &lincx, y, &lincy);
      n -= (PRIMME_INT)ln;
      x += ln;
      y += ln;
   }

   return r;
#endif
}

/*******************************************************************************
 * Subroutine Num_larnv_Sprimme - x(0:n*incy-1:incy) = rand(0:n-1)
 ******************************************************************************/
TEMPLATE_PLEASE
void Num_larnv_Sprimme(int idist, PRIMME_INT *iseed, PRIMME_INT length,
      SCALAR *x) {

   PRIMME_BLASINT lidist = idist;
   PRIMME_BLASINT llength;
   PRIMME_BLASINT temp[4];
   PRIMME_BLASINT *liseed;
   int i;

   if (sizeof(PRIMME_INT) == sizeof(PRIMME_BLASINT)) {
      liseed = (PRIMME_BLASINT*)iseed; /* cast avoid compiler warning */
   } else {
      liseed = temp;
      for(i=0; i<4; i++)
         liseed[i] = (PRIMME_BLASINT)iseed[i];
   }

   while(length > 0) {
      llength = (PRIMME_BLASINT)min(length, PRIMME_BLASINT_MAX-1);
      XLARNV(&lidist, liseed, &llength, x);
      length -= (PRIMME_INT)llength;
      x += llength;
   }

   if (sizeof(PRIMME_INT) != sizeof(PRIMME_BLASINT))
      for(i=0; i<4; i++)
         iseed[i] = (int)liseed[i];
}

/*******************************************************************************
 * Subroutine Num_scal_Sprimme - x(0:n*incx-1:incx) *= alpha
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_scal_Sprimme(PRIMME_INT n, SCALAR alpha, SCALAR *x, int incx,primme_params *primme) {

   
      #ifdef USE_DOUBLE
	 magma_dscal(n,alpha,x,incx,primme->queue);
	 #elif USE_DOUBLECOMPLEX
      magma_zscal(n,MAGMA_Z_MAKE(RE(alpha),IM(alpha)),(magmaDoubleComplex_ptr)x,incx,primme->queue);
	 #elif USE_FLOAT
      magma_scal(n,alpha,x,incx,primme->queue);
	 #elif USE_FLOATCOMPLEX
	 magma_cscal(n,MAGMA_C_MAKE(RE(alpha),IM(alpha)),(magmaFloatComplex_ptr)x,incx,primme->queue);
	 #endif
}
#endif
 
TEMPLATE_PLEASE
void Num_scal_Sprimme(PRIMME_INT n, SCALAR alpha, SCALAR *x, int incx) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lincx = incx;

   while(n > 0) {
      ln = (PRIMME_BLASINT)min(n, PRIMME_BLASINT_MAX-1);
      XSCAL(&ln, &alpha, x, &lincx);
      n -= (PRIMME_INT)ln;
      x += ln;
   }
}

/*******************************************************************************
 * Subroutine Num_swap_Sprimme - swap x(0:n*incx-1:incx) and y(0:n*incy-1:incy)
 ******************************************************************************/
 
TEMPLATE_PLEASE
void Num_swap_Sprimme(PRIMME_INT n, SCALAR *x, int incx, SCALAR *y, int incy) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lincx = incx;
   PRIMME_BLASINT lincy = incy;

   while(n > 0) {
      ln = (PRIMME_BLASINT)min(n, PRIMME_BLASINT_MAX-1);
      XSWAP(&ln, x, &lincx, y, &lincy);
      n -= (PRIMME_INT)ln;
      x += ln;
      y += ln;
   }
}

/*******************************************************************************
 * Subroutines for dense eigenvalue decomposition
 * NOTE: xheevx is used instead of xheev because xheev is not in ESSL
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_heev_Sprimme(const char *jobz, const char *uplo, int n, SCALAR *a,
      int lda, PRIMME_REAL *w, SCALAR *work, int ldwork, int *info,primme_params *primme) {

/* NOT WORKING */
   int ln = n;
   int llda = lda;
   int lldwork = ldwork;
   
   SCALAR *wA;

#ifdef USE_COMPLEX
   PRIMME_REAL *rwork;
#endif
    int *iwork;
 
    int min_size_work;
    if(jobz[0]=='V')
    #ifdef USE_DOUBLE
    	  min_size_work=max(2*n+n*magma_get_chetrd_nb(n),1 + 6*n+2*n*n);
    else
	  min_size_work=2*n+n*magma_get_chetrd_nb(n);

    #elif USE_DOUBLECOMPLEX
    	  min_size_work=max(n+n*magma_get_chetrd_nb(n),2*n+n*n);
    else
	  min_size_work=n+n*magma_get_chetrd_nb(n);

    #elif USE_FLOAT
    	  min_size_work=max(2*n+n*magma_get_chetrd_n(1),1 + 6 + 2*n*n);
    else
	  min_size_work=2*n+n*magma_get_chetrd_nb(n);

    #elif USE_FLOATCOMPLEX
    	  min_size_work=max(2*n+n*magma_get_chetrd_nb(n),1 + 6*n+2*n*n);
    else
	  min_size_work=2*n+n*magma_get_chetrd_nb(n);

    #endif


#ifdef USE_COMPLEX
   int min_size_rwork = 1+5*n+2*n*n;
   if(jobz[0]=='V')
	  min_size_rwork=1+5*n+2*n*n;
   else
 	  min_size_rwork=n;
#else
   int min_size_rwork = 0;
#endif
   int min_size_iwork = 3+5*n;


   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

    /* Borrow space from work for z, rwork and iwork */
   if ( 		WRKSP_MALLOC_PRIMME(n*n, &wA, &work, &lldwork)
   //magma_malloc(&wA,n*n*sizeof(SCALAR));
#ifdef USE_COMPLEX
            || WRKSP_MALLOC_PRIMME(min_size_rwork, &rwork, &work, &lldwork)
   //magma_malloc(&rwork,min_size_rwork*sizeof(PRIMME_REAL));
#endif
            || WRKSP_MALLOC_PRIMME(min_size_iwork, &iwork, &work, &lldwork)
   //magma_malloc(&iwork,min_size_iwork*sizeof(int));
	    ) {

         *info = -1;
         return;
    }
	 
    #ifdef USE_DOUBLE
    magma_dsyevd_gpu(magma_vec_const(jobz[0]),
				 magma_uplo_const(uplo[0]),
				 ln,
				 (magmaDouble_ptr)a,
				 llda,
				 w,
				 wA,
				 n,
				 work,
				 min_size_work,
				 iwork,
				 min_size_iwork,
				 info);
  
    #elif USE_DOUBLECOMPLEX
    magma_zheevd_gpu(magma_vec_const(jobz[0]),
				 magma_uplo_const(uplo[0]),
				 ln,
				 (magmaDoubleComplex_ptr)a,
				 llda,
				 w,
				 (magmaDoubleComplex*)wA,
				 llda,
				 (magmaDoubleComplex*)work,
				 min_size_work,
				 rwork,
			      min_size_rwork,
				 iwork,
				 min_size_iwork,
				 info);

    #elif USE_FLOAT
    magma_ssyevd_gpu(magma_vec_const(jobz[0]),
				 magma_uplo_const(uplo[0]),
				 ln,
				 (magmaFloat_ptr)a,
				 llda,
				 w,
				 wA,
				 llda,
				 work,
				 min_size_work,
				 iwork,
				 min_size_iwork,
				 info);

    #elif USE_FLOATCOMPLEX
    magma_cheevd_gpu(magma_vec_const(jobz[0]),
				 magma_uplo_const(uplo[0]),
				 ln,
				 (magmaFloatComplex_ptr)a,
				 llda,
				 w,
				 (magmaFloatComplex*)wA,
				 llda,
				 (magmaFloatComplex*)work,
				 min_size_work,
				 rwork,
			      min_size_rwork,
				 iwork,
				 min_size_iwork,
				 info);
    #endif

    NumGPU_copy_matrix_Sprimme(wA, n, n, n, a, lda,primme);
 
}

#endif


 
TEMPLATE_PLEASE
void Num_heev_Sprimme(const char *jobz, const char *uplo, int n, SCALAR *a,
      int lda, PRIMME_REAL *w, SCALAR *work, int ldwork, int *info) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldwork = ldwork;
   PRIMME_BLASINT linfo = 0;
   SCALAR *z;
   PRIMME_REAL abstol=0.0;
#ifdef USE_COMPLEX
   PRIMME_REAL *rwork;
#endif
   PRIMME_BLASINT *iwork, *ifail;
   SCALAR dummys=0;
   PRIMME_REAL   dummyr=0;
   PRIMME_BLASINT dummyi=0;

   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

   /* NULL matrices and zero leading dimension may cause problems */
   if (a == NULL) a = &dummys;
   if (llda < 1) llda = 1;
   if (w == NULL) w = &dummyr;

   /* Borrow space from work for z, rwork and iwork or set dummy values */
   if (ldwork != -1) {
      if (
               WRKSP_MALLOC_PRIMME(n*n, &z, &work, &lldwork) 
#ifdef USE_COMPLEX
            || WRKSP_MALLOC_PRIMME(7*n, &rwork, &work, &lldwork)
#endif
            || WRKSP_MALLOC_PRIMME(5*n, &iwork, &work, &lldwork)
            || WRKSP_MALLOC_PRIMME(n, &ifail, &work, &lldwork)
         ) {
         *info = -1;
         return;
      }
   }
   else {
      z = &dummys;
#ifdef USE_COMPLEX
      rwork = &dummyr;
#endif
      iwork = &dummyi;
      ifail = &dummyi;
   }

#ifdef NUM_CRAY
   _fcd jobz_fcd, range_fcd, uplo_fcd;

   jobz_fcd = _cptofcd(jobz, strlen(jobz));
   range_fcd = _cptofcd("A", 1);
   uplo_fcd = _cptofcd(uplo, strlen(uplo));

   XHEEVX(jobz_fcd, range_fcd, uplo_fcd, &ln, a, &llda, &dummyr, &dummyr,
         &dummyi, &dummyi, &abstol, &dummyi, w, z, &ln, work, &lldwork,
#  ifdef USE_COMPLEXmagma_zhemm
         rwork,
#  endif
         iwork, ifail, &linfo);
#else
   XHEEVX(jobz, "A", uplo, &ln, a, &llda, &dummyr, &dummyr,
         &dummyi, &dummyi, &abstol, &dummyi, w, z, &ln, work, &lldwork,
#  ifdef USE_COMPLEX
         rwork,
#  endif
         iwork, ifail, &linfo);
#endif

   /* Copy z to a or add the extra space for z, iwork and ifail */
   if (ldwork != -1) {
      Num_copy_matrix_Sprimme(z, n, n, n, a, lda);
   }
   else {
      work[0] += (PRIMME_REAL)n*n + sizeof(PRIMME_BLASINT)*6*n/sizeof(SCALAR) + 6.0;
#ifdef USE_COMPLEX
      work[0] += (PRIMME_REAL)sizeof(PRIMME_REAL)*7*n/sizeof(SCALAR) + 2.0;
#endif
   }
   *info = (int)linfo;
}

/*******************************************************************************
 * Subroutines for dense singular value decomposition
 ******************************************************************************/

#ifdef __NVCC__

TEMPLATE_PLEASE
#ifndef USE_COMPLEX

void NumGPU_gesvd_Sprimme(const char *jobu, const char *jobvt, int m, int n,
      SCALAR *a, int lda, PRIMME_REAL *s, SCALAR *u, int ldu, SCALAR *vt, int ldvt,
      SCALAR *work, int ldwork, int *info, primme_params *primme){
   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

   magma_vec_t magma_jobu = magma_vec_const(jobu[0]);
   magma_vec_t magma_jobvt = magma_vec_const(jobvt[0]);

   SCALAR *workspace;
   int lworkspace;

  #ifdef USE_DOUBLE
  int mx = max(m,n);
  int mn = min(m,n);
  int nb = magma_get_dgesvd_nb(m,n);
  int lwork = 3*mn + (mx + mn)*nb;

  magma_dgesvd(magma_jobu,
 			 magma_jobvt,
			 m,
			 n,
			 a,
			 lda,
			 s,
			 u,
			 ldu,
			 vt,
			 ldvt,
			 work,
			 lwork,
			 info 
			 );
	
  #elif USE_FLOAT
  int mx = max(m,n);
  int mn = min(m,n);
  int nb = magma_get_dgesvd_nb(m,n);
  int lwork = 3*mn + (mx + mn)*nb;
  
   magma_sgesvd(magma_jobu,
   			 magma_jobvt,
			 m,
			 n,
			 a,
			 lda,
			 s,
			 u,
			 ldu,
			 vt,
			 ldvt,
			 workspace,
			 lworkspace,
			 info 
			 );
   #endif


}

#else
void NumGPU_gesvd_Sprimme(const char *jobu, const char *jobvt, int m, int n,
   SCALAR *a, int lda, PRIMME_REAL *s, SCALAR *u, int ldu, SCALAR *vt, int ldvt,
   SCALAR *work, int ldwork, PRIMME_REAL *rwork, int *info, primme_params *primme){
 
   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;


   magma_vec_t magma_jobu = magma_vec_const(jobu[0]);
   magma_vec_t magma_jobvt = magma_vec_const(jobvt[0]);

   
  #ifdef USE_DOUBLECOMPLEX
  int mx = max(m,n);
  int mn = min(m,n);
  int nb = magma_get_dgesvd_nb(m,n);
  int lwork = 3*mn + (mx + mn)*nb;

  magma_zgesvd	(	magma_jobu,
					magma_jobvt,
					m,
					n,
					(magmaDoubleComplex *)a,
					lda,
					s,
					(magmaDoubleComplex *)u,
					ldu,
					(magmaDoubleComplex *)vt,
					ldvt,
					(magmaDoubleComplex *)work,
					lwork,
					rwork,
					info 
					);		
	
  #elif USE_FLOATCOMPLEX
  int mx = max(m,n);
  int mn = min(m,n);
  int nb = magma_get_dgesvd_nb(m,n);
  int lwork = 3*mn + (mx + mn)*nb;

  magma_cgesvd	(	magma_jobu,
					magma_jobvt,
					m,
					n,
					(magmaFloatComplex *)a,
					lda,
					s,
					(magmaFloatComplex *)u,
					ldu,
					(magmaFloatComplex *)vt,
					ldvt,
					(magmaFloatComplex *)work,
					lwork,
					rwork,
					info 
					);
   #endif
}
#endif
#endif // __NVCC__ 

TEMPLATE_PLEASE
#ifndef USE_COMPLEX
void Num_gesvd_Sprimme(const char *jobu, const char *jobvt, int m, int n,
      SCALAR *a, int lda, PRIMME_REAL *s, SCALAR *u, int ldu, SCALAR *vt, int ldvt,
      SCALAR *work, int ldwork, int *info){

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldu = ldu;
   PRIMME_BLASINT lldvt = ldvt;
   PRIMME_BLASINT lldwork = ldwork;
   PRIMME_BLASINT linfo = 0;
   SCALAR dummys=0;
   PRIMME_REAL   dummyr=0;

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

   /* NULL matrices and zero leading dimension may cause problems */
   if (a == NULL) a = &dummys;
   if (llda < 1) llda = 1;
   if (s == NULL) s = &dummyr;
   if (u == NULL) u = &dummys;
   if (lldu < 1) lldu = 1;
   if (vt == NULL) vt = &dummys;
   if (lldvt < 1) lldvt = 1;

#ifdef NUM_CRAY
   _fcd jobu_fcd, jobvt_fcd;

   jobu_fcd = _cptofcd(jobu, strlen(jobu));
   jobvt_fcd = _cptofcd(jobvt, strlen(jobvt));
   XGESVD(jobu_fcd, jobvt_fcd, &lm, &ln, a, &llda, s, u, &lldu, vt, &lldvt, work,
#else
   XGESVD(jobu, jobvt, &lm, &ln, a, &llda, s, u, &lldu, vt, &lldvt, work,
          &lldwork, &linfo);
#endif
   *info = (int)linfo;
}

#else
void Num_gesvd_Sprimme(const char *jobu, const char *jobvt, int m, int n,
   SCALAR *a, int lda, PRIMME_REAL *s, SCALAR *u, int ldu, SCALAR *vt, int ldvt,
   SCALAR *work, int ldwork, PRIMME_REAL *rwork, int *info){

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldu = ldu;
   PRIMME_BLASINT lldvt = ldvt;
   PRIMME_BLASINT lldwork = ldwork;
   PRIMME_BLASINT linfo = 0;
   SCALAR dummys=0;
   PRIMME_REAL   dummyr=0;

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

   /* NULL matrices and zero leading dimension may cause problems */
   if (a == NULL) a = &dummys;
   if (llda < 1) llda = 1;
   if (s == NULL) s = &dummyr;
   if (u == NULL) u = &dummys;
   if (lldu < 1) lldu = 1;
   if (vt == NULL) vt = &dummys;
   if (lldvt < 1) lldvt = 1;

#ifdef NUM_CRAY
   _fcd jobu_fcd, jobvt_fcd;

   jobu_fcd = _cptofcd(jobu, strlen(jobu));
   jobvt_fcd = _cptofcd(jobvt, strlen(jobvt));
   XGESVD(jobu_fcd, jobvt_fcd, &lm, &ln, a, &llda, s, u, &lldu, vt, &lldvt, work,
          &lldwork, rwork, &linfo);
#else
   XGESVD(jobu, jobvt, &lm, &ln, a, &llda, s, u, &lldu, vt, &lldvt, work,
          &lldwork, rwork, &linfo);
#endif
   *info = (int)linfo;
}
#endif





/*******************************************************************************
 * Subroutine Num_hetrf_Sprimme - LL^H factorization with pivoting
 ******************************************************************************/
#ifdef __NVCC__
TEMPLATE_PLEASE
void NumGPU_hetrf_Sprimme(const char *uplo, int n, SCALAR *a, int lda, int *ipivot,
   SCALAR *work, int ldwork, int *info, primme_params *primme) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT *lipivot;
   PRIMME_BLASINT lldwork = ldwork;
   PRIMME_BLASINT linfo = 0; 
   int i;
   SCALAR dummys=0;
   PRIMME_BLASINT dummyi=0;

   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

   if (sizeof(int) != sizeof(PRIMME_BLASINT)) {
      if (MALLOC_PRIMME(n, &lipivot) != 0) {
         *info = -1;
         return;
      }
   } else {
      lipivot = (PRIMME_BLASINT *)ipivot; /* cast avoid compiler warning */
   }

   /* NULL matrices and zero leading dimension may cause problems */
   if (a == NULL) a = &dummys;
   if (llda < 1) llda = 1;
   if (lipivot == NULL) lipivot = &dummyi;

#ifdef NUM_CRAY
   _fcd uplo_fcd;

   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   XHETRF(uplo_fcd, &ln, a, &llda, lipivot, work, &lldwork, &linfo);
#else
   XHETRF(uplo, &ln, a, &llda, lipivot, work, &lldwork, &linfo);
#endif

   if (sizeof(int) != sizeof(PRIMME_BLASINT)) {
      if (ipivot) for(i=0; i<n; i++)
         ipivot[i] = (int)lipivot[i];
      free(lipivot);
   }
   *info = (int)linfo;

}
#endif
TEMPLATE_PLEASE
void Num_hetrf_Sprimme(const char *uplo, int n, SCALAR *a, int lda, int *ipivot,
   SCALAR *work, int ldwork, int *info) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT *lipivot;
   PRIMME_BLASINT lldwork = ldwork;
   PRIMME_BLASINT linfo = 0; 
   int i;
   SCALAR dummys=0;
   PRIMME_BLASINT dummyi=0;

   /* Zero dimension matrix may cause problems */
   if (n == 0) return;

   if (sizeof(int) != sizeof(PRIMME_BLASINT)) {
      if (MALLOC_PRIMME(n, &lipivot) != 0) {
         *info = -1;
         return;
      }
   } else {
      lipivot = (PRIMME_BLASINT *)ipivot; /* cast avoid compiler warning */
   }

   /* NULL matrices and zero leading dimension may cause problems */
   if (a == NULL) a = &dummys;
   if (llda < 1) llda = 1;
   if (lipivot == NULL) lipivot = &dummyi;

#ifdef NUM_CRAY
   _fcd uplo_fcd;

   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   XHETRF(uplo_fcd, &ln, a, &llda, lipivot, work, &lldwork, &linfo);
#else
   XHETRF(uplo, &ln, a, &llda, lipivot, work, &lldwork, &linfo);
#endif

   if (sizeof(int) != sizeof(PRIMME_BLASINT)) {
      if (ipivot) for(i=0; i<n; i++)
         ipivot[i] = (int)lipivot[i];
      free(lipivot);
   }
   *info = (int)linfo;

}

/*******************************************************************************
 * Subroutine Num_hetrs_Sprimme - b = A\b where A stores a LL^H factorization
 ******************************************************************************/
 
TEMPLATE_PLEASE
void Num_hetrs_Sprimme(const char *uplo, int n, int nrhs, SCALAR *a,
      int lda, int *ipivot, SCALAR *b, int ldb, int *info) {

   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT lnrhs = nrhs;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT *lipivot;
   PRIMME_BLASINT lldb = ldb;
   PRIMME_BLASINT linfo = 0; 
   int i;

   /* Zero dimension matrix may cause problems */
   if (n == 0 || nrhs == 0) return;

   if (sizeof(int) != sizeof(PRIMME_BLASINT)) {
      if (MALLOC_PRIMME(n, &lipivot) != 0) {
         *info = -1;
         return;
      }
   } else {
      lipivot = (PRIMME_BLASINT *)ipivot; /* cast avoid compiler warning */
   }
#ifdef NUM_CRAY
   _fcd uplo_fcd;

   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   XHETRS(uplo_fcd, &ln, &lnrhs, a, &llda, lipivot, b, &lldb, &linfo);
#else
   XHETRS(uplo, &ln, &lnrhs, a, &llda, lipivot, b, &lldb, &linfo);
#endif

   if (sizeof(int) != sizeof(PRIMME_BLASINT)) {
      if (ipivot) for(i=0; i<n; i++)
         ipivot[i] = (int)lipivot[i];
      free(lipivot);
   }
   *info = (int)linfo;
}

/*******************************************************************************
 * Subroutine Num_trsm_Sprimme - b = op(A)\b
 ******************************************************************************/
#ifdef __NVCC__

TEMPLATE_PLEASE
void NumGPU_trsm_Sprimme(const char *side, const char *uplo, const char *transa,
      const char *diag, int m, int n, SCALAR alpha, SCALAR *a, int lda,
      SCALAR *b, int ldb, primme_params *primme) {

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;
   
   magma_side_t mside;
   magma_uplo_t muplo;
   magma_trans_t mtrans;
   magma_diag_t mdiag;
   
   mside = magma_side_const(side[0]);
   muplo = magma_uplo_const(uplo[0]);
   mtrans = magma_trans_const(transa[0]);
   mdiag = magma_diag_const(diag[0]);

   

   #ifdef USE_DOUBLE
   magma_dtrsm(mside,muplo,mtrans,mdiag,m,n,alpha,a,lda,b,ldb,primme->queue);
   #elif USE_DOUBLECOMPLEX
   magmaDoubleComplex malpha;
   memcpy(&malpha,&alpha,sizeof(SCALAR));
   magma_ztrsm(mside,muplo,mtrans,mdiag,m,n,malpha,(magmaDoubleComplex_const_ptr)a,lda,
			(magmaDoubleComplex_ptr)b,ldb,primme->queue);
   #elif USE_FLOAT
   magma_strsm(mside,muplo,mtrans,mdiag,m,n,alpha,a,lda,b,ldb,primme->queue);
   #elif USE_FLOATCOMPLEX
   magmaFloatComplex malpha;
   memcpy(&malpha,&alpha,sizeof(SCALAR));
   magma_ctrsm(mside,muplo,mtrans,mdiag,m,n,malpha,(magmaFloatComplex_const_ptr)a,lda,(magmaFloatComplex_ptr)b,ldb,primme->queue);
   #endif

}
#endif
TEMPLATE_PLEASE
void Num_trsm_Sprimme(const char *side, const char *uplo, const char *transa,
      const char *diag, int m, int n, SCALAR alpha, SCALAR *a, int lda,
      SCALAR *b, int ldb) {

   PRIMME_BLASINT lm = m;
   PRIMME_BLASINT ln = n;
   PRIMME_BLASINT llda = lda;
   PRIMME_BLASINT lldb = ldb;

   /* Zero dimension matrix may cause problems */
   if (m == 0 || n == 0) return;

#ifdef NUM_CRAY
   _fcd side_fcd, uplo_fcd, transa_fcd, diag_fcd;

   side_fcd = _cptofcd(side, strlen(side));
   uplo_fcd = _cptofcd(uplo, strlen(uplo));
   transa_fcd = _cptofcd(transa, strlen(transa));
   diag_fcd = _cptofcd(diag, strlen(diag));
   XTRSM(side_fcd, uplo_fcd, transa_fcd, diag_fcd, &lm, &ln, &alpha, a, &llda, b, &lldb);
#else
   XTRSM(side, uplo, transa, diag, &lm, &ln, &alpha, a, &llda, b, &lldb);
#endif
}
