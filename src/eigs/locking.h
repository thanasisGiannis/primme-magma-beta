/*******************************************************************************
 * Copyright (c) 2016, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef locking_H
#define locking_H
#if !defined(CHECK_TEMPLATE) && !defined(restart_locking_Sprimme)
#  define restart_locking_Sprimme CONCAT(restart_locking_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(restart_locking_Rprimme)
#  define restart_locking_Rprimme CONCAT(restart_locking_,REAL_SUF)
#endif
int restart_locking_dprimme(int *restartSize, double *V, double *W,
      int64_t nLocal, int basisSize, int64_t ldV, double **X, double **R,
      double *hVecs, int ldhVecs, int *restartPerm, double *hVals, int *flags,
      int *iev, int *ievSize, double *blockNorms, double *evecs,
      int64_t ldevecs, double *evals, int *numConverged, int *numLocked,
      double *resNorms, int *evecsperm, int numPrevRetained,
      int *indexOfPreviousVecs, int *hVecsPerm, int reset, double machEps,
      double *rwork, size_t *rworkSize, int *iwork, int iworkSize,
      primme_params *primme);
int restart_locking_zprimme(int *restartSize, PRIMME_COMPLEX_DOUBLE *V, PRIMME_COMPLEX_DOUBLE *W,
      int64_t nLocal, int basisSize, int64_t ldV, PRIMME_COMPLEX_DOUBLE **X, PRIMME_COMPLEX_DOUBLE **R,
      PRIMME_COMPLEX_DOUBLE *hVecs, int ldhVecs, int *restartPerm, double *hVals, int *flags,
      int *iev, int *ievSize, double *blockNorms, PRIMME_COMPLEX_DOUBLE *evecs,
      int64_t ldevecs, double *evals, int *numConverged, int *numLocked,
      double *resNorms, int *evecsperm, int numPrevRetained,
      int *indexOfPreviousVecs, int *hVecsPerm, int reset, double machEps,
      PRIMME_COMPLEX_DOUBLE *rwork, size_t *rworkSize, int *iwork, int iworkSize,
      primme_params *primme);
int restart_locking_sprimme(int *restartSize, float *V, float *W,
      int64_t nLocal, int basisSize, int64_t ldV, float **X, float **R,
      float *hVecs, int ldhVecs, int *restartPerm, float *hVals, int *flags,
      int *iev, int *ievSize, float *blockNorms, float *evecs,
      int64_t ldevecs, float *evals, int *numConverged, int *numLocked,
      float *resNorms, int *evecsperm, int numPrevRetained,
      int *indexOfPreviousVecs, int *hVecsPerm, int reset, double machEps,
      float *rwork, size_t *rworkSize, int *iwork, int iworkSize,
      primme_params *primme);
int restart_locking_cprimme(int *restartSize, PRIMME_COMPLEX_FLOAT *V, PRIMME_COMPLEX_FLOAT *W,
      int64_t nLocal, int basisSize, int64_t ldV, PRIMME_COMPLEX_FLOAT **X, PRIMME_COMPLEX_FLOAT **R,
      PRIMME_COMPLEX_FLOAT *hVecs, int ldhVecs, int *restartPerm, float *hVals, int *flags,
      int *iev, int *ievSize, float *blockNorms, PRIMME_COMPLEX_FLOAT *evecs,
      int64_t ldevecs, float *evals, int *numConverged, int *numLocked,
      float *resNorms, int *evecsperm, int numPrevRetained,
      int *indexOfPreviousVecs, int *hVecsPerm, int reset, double machEps,
      PRIMME_COMPLEX_FLOAT *rwork, size_t *rworkSize, int *iwork, int iworkSize,
      primme_params *primme);
#endif
