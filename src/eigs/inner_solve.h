/*******************************************************************************
 * Copyright (c) 2016, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef inner_solve_H
#define inner_solve_H
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Sprimme)
#  define inner_solve_Sprimme CONCAT(inner_solve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Rprimme)
#  define inner_solve_Rprimme CONCAT(inner_solve_,REAL_SUF)
#endif
int inner_solve_dprimme(double *x, double *r, double *rnorm, double *evecs,
      int64_t ldevecs, double *UDU, int *ipivot, double *xKinvx,
      double *Lprojector, int64_t ldLprojector, double *RprojectorQ,
      int64_t ldRprojectorQ, double *RprojectorX, int64_t ldRprojectorX,
      int sizeLprojector, int sizeRprojectorQ, int sizeRprojectorX, double *sol,
      double eval, double shift, int *touch, double machEps, double *rwork,
      size_t rworkSize, primme_params *primme);
int inner_solve_zprimme(PRIMME_COMPLEX_DOUBLE *x, PRIMME_COMPLEX_DOUBLE *r, double *rnorm, PRIMME_COMPLEX_DOUBLE *evecs,
      int64_t ldevecs, PRIMME_COMPLEX_DOUBLE *UDU, int *ipivot, PRIMME_COMPLEX_DOUBLE *xKinvx,
      PRIMME_COMPLEX_DOUBLE *Lprojector, int64_t ldLprojector, PRIMME_COMPLEX_DOUBLE *RprojectorQ,
      int64_t ldRprojectorQ, PRIMME_COMPLEX_DOUBLE *RprojectorX, int64_t ldRprojectorX,
      int sizeLprojector, int sizeRprojectorQ, int sizeRprojectorX, PRIMME_COMPLEX_DOUBLE *sol,
      double eval, double shift, int *touch, double machEps, PRIMME_COMPLEX_DOUBLE *rwork,
      size_t rworkSize, primme_params *primme);
int inner_solve_sprimme(float *x, float *r, float *rnorm, float *evecs,
      int64_t ldevecs, float *UDU, int *ipivot, float *xKinvx,
      float *Lprojector, int64_t ldLprojector, float *RprojectorQ,
      int64_t ldRprojectorQ, float *RprojectorX, int64_t ldRprojectorX,
      int sizeLprojector, int sizeRprojectorQ, int sizeRprojectorX, float *sol,
      float eval, float shift, int *touch, double machEps, float *rwork,
      size_t rworkSize, primme_params *primme);
int inner_solve_cprimme(PRIMME_COMPLEX_FLOAT *x, PRIMME_COMPLEX_FLOAT *r, float *rnorm, PRIMME_COMPLEX_FLOAT *evecs,
      int64_t ldevecs, PRIMME_COMPLEX_FLOAT *UDU, int *ipivot, PRIMME_COMPLEX_FLOAT *xKinvx,
      PRIMME_COMPLEX_FLOAT *Lprojector, int64_t ldLprojector, PRIMME_COMPLEX_FLOAT *RprojectorQ,
      int64_t ldRprojectorQ, PRIMME_COMPLEX_FLOAT *RprojectorX, int64_t ldRprojectorX,
      int sizeLprojector, int sizeRprojectorQ, int sizeRprojectorX, PRIMME_COMPLEX_FLOAT *sol,
      float eval, float shift, int *touch, double machEps, PRIMME_COMPLEX_FLOAT *rwork,
      size_t rworkSize, primme_params *primme);
#endif
